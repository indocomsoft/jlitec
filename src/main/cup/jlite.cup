package jlitec.generated;

import java_cup.runtime.*;
import com.google.common.collect.Lists;
import jlitec.parser.ParserWrapper;
import jlitec.ast.*;
import jlitec.ast.expr.*;
import jlitec.ast.stmt.*;
import java.util.List;
import com.google.common.collect.ImmutableList;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
parser code {:
    private ParserWrapper pw;

    public parser(Scanner s, ParserWrapper pw) {
        super(s, new ComplexSymbolFactory());
        this.pw = pw;
    }

    @Override
    public void report_error(String message, Object info) {
      if (pw != null && info instanceof ComplexSymbol cs) {
          pw.handleCUPError(message, cs);
      } else {
          super.report_error(message, info);
      }
    }

    @Override
    public void syntax_error(Symbol cur_token) {
      if (pw != null && cur_token instanceof ComplexSymbol cs) {
          List<String> tokens = expected_token_ids().stream().map(id -> symbl_name_from_id(id)).collect(ImmutableList.toImmutableList());
          List<String> newTokens;
          for(;;) {
            newTokens = expected_token_ids().stream().map(id -> symbl_name_from_id(id)).collect(ImmutableList.toImmutableList());
            if (newTokens.size() == tokens.size()) break;
            tokens = newTokens;
          }
          this.pw.handleSyntaxError(cs, tokens);
      } else {
          super.syntax_error(cur_token);
      }
    }

    /* HAX WARNING! This method uses some internal states of lr_parser */
    private void typecheckError(IncompatibleTypeException e) throws Exception {
        final var act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        final var handleSize = production_tab[(-act)-1][1];
        report_fatal_error(e.getMessage(), spanSymbols(handleSize, 1));
    }

    /* HAX WARNING! This method uses some internal states of lr_parser */
    private ComplexSymbol spanSymbols(int left, int right) {
        final var leftSymbol = (ComplexSymbol) stack.get(stack.size() - Math.max(left, right));
        final var rightSymbol = (ComplexSymbol) stack.get(stack.size() - Math.min(left, right));
        return (ComplexSymbol)((ComplexSymbolFactory) getSymbolFactory()).newSymbol("EXPR", leftSymbol.sym, leftSymbol.xleft, rightSymbol.xright);
    }
:}

/* Keywords */
terminal CLASS, MAIN, IF, ELSE, WHILE, READLN, PRINTLN, RETURN, THIS, NEW, NULL;
/* Types */
terminal INT, BOOL, STRING, VOID;
/* Punctuations */
terminal LBRACE, RBRACE, LPAREN, RPAREN, SEMICOLON, COMMA, DOT;
/* Operators */
terminal ASSIGN, OR, AND, GT, LT, GEQ, LEQ, EQ, NEQ, NOT, PLUS, MINUS, MULT, DIV;
/* Booleans */
terminal TRUE, FALSE;

terminal String ID;
terminal String CNAME;
terminal Integer INTEGER_LITERAL;
terminal String STRING_LITERAL;

non terminal Program Program;
non terminal Klass MainClass;
non terminal Klass ClassDecl;
non terminal List<Klass> ClassDecl_star;
non terminal List<Var> FmlList, FmlList_opt;
non terminal Var VarDecl;
non terminal List<Var> VarDecl_plus, VarDecl_star;
non terminal Method MdDecl;
non terminal List<Method> MdDecl_plus;
non terminal Type Type;
non terminal Stmt Stmt;
non terminal List<Stmt> Stmt_plus, Stmt_star;
non terminal Expr Exp;
non terminal Expr Atom;
non terminal List<Expr> ExpList;
non terminal Expr BExp;
non terminal Expr AExp;
non terminal Expr RExp;
non terminal Expr Conj;
non terminal BinaryOp BOp;
non terminal Expr BGrd;
non terminal Expr Term;
non terminal Expr Ftr;

non terminal String CnameDecl;

start with Program;

Program ::= MainClass:main ClassDecl_star:lst
          {: lst.add(0, main); RESULT = new Program(lst); :}
          | ClassDecl ClassDecl_star
          {: report_fatal_error("Missing main class.", stack.get(stack.size() - 2)); :}
          ;

MainClass ::= CnameDecl:cname VOID MAIN LPAREN FmlList_opt:args RPAREN LBRACE VarDecl_star:vars Stmt_plus:stmtlist RBRACE RBRACE
            {: RESULT = new Klass(cname, Lists.newArrayList(), Lists.newArrayList(new Method(new Type(JliteType.VOID), "main", args, vars, stmtlist))); :}
            | CnameDecl VOID MAIN LPAREN FmlList_opt RPAREN LBRACE VarDecl_star RBRACE RBRACE
            {: report_fatal_error("Method body of main must contain at least 1 statement.", spanSymbols(3, 1)); :}
            | CnameDecl VOID MAIN LPAREN FmlList_opt RPAREN LBRACE VarDecl_star Stmt_plus RBRACE MdDecl_plus RBRACE
            {: report_fatal_error("Main class can only have 1 method, namely main.", stack.get(stack.size() - 2)); :}
            ;

// Resolve shift/reduce ambiguity of Type ::= ... and MdDecl_plus ::= ...
// by enumerating the 4 possible permutations: (0, 0), (0, +), (+, 0), (+, +)
ClassDecl ::=
            CnameDecl:cname VarDecl_plus:vars MdDecl_plus:methods RBRACE
            {: RESULT = new Klass(cname, vars, methods); :}
            | CnameDecl:cname VarDecl_plus:vars RBRACE
            {: RESULT = new Klass(cname, vars, Lists.newArrayList()); :}
            | CnameDecl:cname MdDecl_plus:methods RBRACE
            {: RESULT = new Klass(cname, Lists.newArrayList(), methods); :}
            | CnameDecl:cname RBRACE
            {: RESULT = new Klass(cname, Lists.newArrayList(), Lists.newArrayList()); :}
            ;
ClassDecl_star ::=
                 ClassDecl_star:lst ClassDecl:klass
                 {: lst.add(klass); RESULT = lst; :}
                 |
                 {: RESULT = Lists.newArrayList(); :}
                 ;

CnameDecl ::= CLASS CNAME:cname LBRACE
            {: RESULT = cname; :}
            | CLASS ID:e LBRACE
            {: report_fatal_error("Class name must begin with an uppercased letter.", stack.get(stack.size() - 2)); :}
            ;

VarDecl ::= Type:type ID:id SEMICOLON
          {: RESULT = new Var(type, id); :}
          | Type CNAME SEMICOLON
          {: report_fatal_error("Variable name must begin with a lowercased letter.", stack.get(stack.size() - 2)); :}
          ;

VarDecl_plus ::=
               VarDecl_plus:lst VarDecl:var
               {: lst.add(var); RESULT = lst; :}
               | VarDecl:var
               {: RESULT = Lists.newArrayList(var); :}
               ;

VarDecl_star ::=
               VarDecl_plus:lst
               {: RESULT = lst; :}
               |
               {: RESULT = Lists.newArrayList(); :}
               ;

MdDecl ::= Type:type ID:id LPAREN FmlList_opt:args RPAREN LBRACE VarDecl_star:vars Stmt_plus:stmtlist RBRACE
         {: RESULT = new Method(type, id, args, vars, stmtlist); :}
         | Type CNAME LPAREN FmlList_opt RPAREN LBRACE VarDecl_star Stmt_plus RBRACE
         {: report_fatal_error("Method name must begin with a lowercased letter.", stack.get(stack.size() - 8)); :}
         | Type ID LPAREN FmlList_opt RPAREN LBRACE VarDecl_star RBRACE
         {: report_fatal_error("Method body must contain at least 1 statement.", spanSymbols(3, 1)); :}
         ;

MdDecl_plus ::=
              MdDecl_plus:lst MdDecl:method
              {: lst.add(method); RESULT = lst; :}
              | MdDecl:method
              {: RESULT = Lists.newArrayList(method); :}
              ;

FmlList_opt ::=
              FmlList:lst
              {: RESULT = lst; :}
              |
              {: RESULT = Lists.newArrayList(); :}
              ;

FmlList ::=
          Type:type ID:id
          {: RESULT = Lists.newArrayList(new Var(type, id)); :}
          | FmlList:lst COMMA Type:type ID:id
          {: lst.add(new Var(type, id)); RESULT = lst; :}
          | Type CNAME
          {: report_fatal_error("Variable name must begin with a lowercased letter.", stack.get(stack.size() - 1)); :}
          | FmlList COMMA Type CNAME
          {: report_fatal_error("Variable name must begin with a lowercased letter.", stack.get(stack.size() - 1)); :}
          ;

Type ::=
       INT
       {: RESULT = new Type(JliteType.INT); :}
       | BOOL
       {: RESULT = new Type(JliteType.BOOL); :}
       | STRING
       {: RESULT = new Type(JliteType.STRING); :}
       | VOID
       {: RESULT = new Type(JliteType.VOID); :}
       | CNAME:cname
       {: RESULT = new Type(cname); :}
       ;

Stmt ::=
       IF LPAREN Exp:cond RPAREN LBRACE Stmt_plus:thenlist RBRACE ELSE LBRACE Stmt_plus:elselist RBRACE
       {: RESULT = new IfStmt(cond, thenlist, elselist); :}
       | WHILE LPAREN Exp:cond RPAREN LBRACE Stmt_star:lst RBRACE
       {: RESULT = new WhileStmt(cond, lst); :}
       | READLN LPAREN ID:id RPAREN SEMICOLON
       {: RESULT = new ReadlnStmt(id); :}
       | PRINTLN LPAREN Exp:e RPAREN SEMICOLON
       {: RESULT = new PrintlnStmt(e); :}
       | ID:id ASSIGN Exp:e SEMICOLON
       {: RESULT = new VarAssignStmt(id, e); :}
       | Atom:target DOT ID:id ASSIGN Exp:e SEMICOLON
       {: RESULT = new FieldAssignStmt(target, id, e); :}
       | Atom:target LPAREN ExpList:args RPAREN SEMICOLON
       {: RESULT = new CallStmt(target, args); :}
       | RETURN Exp:e SEMICOLON
       {: RESULT = new ReturnStmt(e); :}
       | RETURN SEMICOLON
       {: RESULT = new ReturnStmt(null); :}
       | IF LPAREN Exp RPAREN LBRACE Stmt_plus RBRACE
       {: report_fatal_error("Missing else in the if-else statement.", stack.peek()); :}
       | IF LPAREN Exp RPAREN LBRACE RBRACE ELSE LBRACE Stmt_plus RBRACE
       {: report_fatal_error("Consequent / then statement(s) cannot be empty.", spanSymbols(6, 5)); :}
       | IF LPAREN Exp RPAREN LBRACE Stmt_plus RBRACE ELSE LBRACE RBRACE
       {: report_fatal_error("Alternative / else statement(s) cannot be empty.", spanSymbols(2, 1)); :}
       ;
Stmt_plus ::=
            Stmt:stmt
            {: RESULT = Lists.newArrayList(stmt); :}
            | Stmt_plus:lst Stmt:stmt
            {: lst.add(stmt); RESULT = lst; :}
            ;
Stmt_star ::=
            Stmt_plus:lst
            {: RESULT = lst; :}
            |
            {: RESULT = Lists.newArrayList(); :}
            ;

// Exp ::= BExp | AExp | SExp ;

/* Make Exp type-specific to resolve Reduce/Reduce conflicts */
Exp ::=
/* unknown type */
        Atom:e
        {: RESULT = e; :}
/* Boolean type */
      // BExp
      | BExp:lhs OR Conj:rhs
      {: try { RESULT = new BinaryExpr(BinaryOp.OR, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
      // Conj
      | Conj:lhs AND RExp:rhs
      {: try { RESULT = new BinaryExpr(BinaryOp.AND, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
      // RExp
      | AExp:lhs BOp:op AExp:rhs
      {: try { RESULT = new BinaryExpr(op, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
      // BGrd
      | NOT BGrd:e
      {: try { RESULT = new UnaryExpr(UnaryOp.NOT, e); } catch (IncompatibleTypeException err) { typecheckError(err); } :}
      | TRUE
      {: RESULT = new BoolLiteralExpr(true); :}
      | FALSE
      {: RESULT = new BoolLiteralExpr(false); :}
/* Integer/String type */
      // AExp
      | AExp:lhs PLUS Term:rhs
      {: try { RESULT = new BinaryExpr(BinaryOp.PLUS, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
      | AExp:lhs MINUS Term:rhs
      {: try { RESULT = new BinaryExpr(BinaryOp.MINUS, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
      // Term
      | Term:lhs MULT Ftr:rhs
      {: try { RESULT = new BinaryExpr(BinaryOp.MULT, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
      | Term:lhs DIV Ftr:rhs
      {: try { RESULT = new BinaryExpr(BinaryOp.DIV, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
      | STRING_LITERAL:s
      {: RESULT = new StringLiteralExpr(s); :}
      // Ftr
      | INTEGER_LITERAL:i
      {: RESULT = new IntLiteralExpr(i); :}
      | MINUS Ftr:e
      {: try { RESULT = new UnaryExpr(UnaryOp.NEGATIVE, e); } catch (IncompatibleTypeException err) { typecheckError(err); } :}
      ;

BExp ::=
       BExp:lhs OR Conj:rhs
       {: try { RESULT = new BinaryExpr(BinaryOp.OR, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
       | Conj:e
       {: RESULT = e; :}
       ;

Conj ::=
       Conj:lhs AND RExp:rhs
       {: try { RESULT = new BinaryExpr(BinaryOp.AND, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
       | RExp:e
       {: RESULT = e; :}
       ;

RExp ::=
       AExp:lhs BOp:op AExp:rhs
       {: try { RESULT = new BinaryExpr(op, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
       | BGrd:e
       {: RESULT = e; :}
       ;

BOp ::=
      LT
      {: RESULT = BinaryOp.LT; :}
      | GT
      {: RESULT = BinaryOp.GT; :}
      | LEQ
      {: RESULT = BinaryOp.LEQ; :}
      | GEQ
      {: RESULT = BinaryOp.GEQ; :}
      | EQ
      {: RESULT = BinaryOp.EQ; :}
      | NEQ
      {: RESULT = BinaryOp.NEQ; :}
      ;

BGrd ::=
       NOT BGrd:e
       {: try { RESULT = new UnaryExpr(UnaryOp.NOT, e); } catch (IncompatibleTypeException err) { typecheckError(err); } :}
       | TRUE
       {: RESULT = new BoolLiteralExpr(true); :}
       | FALSE
       {: RESULT = new BoolLiteralExpr(false); :}
       | Atom:e
       {: RESULT = e; :}
       ;

AExp ::=
       AExp:lhs PLUS Term:rhs
       {: try { RESULT = new BinaryExpr(BinaryOp.PLUS, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
       | AExp:lhs MINUS Term:rhs
       {: try { RESULT = new BinaryExpr(BinaryOp.MINUS, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
       | Term:e
       {: RESULT = e; :}
       ;

Term ::=
       Term:lhs MULT Ftr:rhs
       {: try { RESULT = new BinaryExpr(BinaryOp.MULT, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
       | Term:lhs DIV Ftr:rhs
       {: try { RESULT = new BinaryExpr(BinaryOp.DIV, lhs, rhs); } catch (IncompatibleTypeException e) { typecheckError(e); } :}
       | Ftr:e
       {: RESULT = e; :}
       | STRING_LITERAL:s
       {: RESULT = new StringLiteralExpr(s); :}
       ;

Ftr ::=
      INTEGER_LITERAL:i
      {: RESULT = new IntLiteralExpr(i); :}
      | MINUS Ftr:e
      {: try { RESULT = new UnaryExpr(UnaryOp.NEGATIVE, e); } catch (IncompatibleTypeException err) { typecheckError(err); } :}
      | Atom:e
      {: RESULT = e; :}
      ;


Atom ::=
         Atom:target DOT ID:id
       {: RESULT = new DotExpr(target, id); :}
       | Atom:target LPAREN ExpList:args RPAREN
       {: RESULT = new CallExpr(target, args); :}
       | THIS
       {: RESULT = new ThisExpr(); :}
       | ID:id
       {: RESULT = new IdExpr(id); :}
       | NEW CNAME:cname LPAREN RPAREN
       {: RESULT = new NewExpr(cname); :}
       | LPAREN Exp:e RPAREN
       {: RESULT = new ParenExpr(e); :}
       | NULL
       {: RESULT = new NullExpr(); :}
       ;

ExpList ::=
          {: RESULT = Lists.newArrayList(); :}
          | Exp:e
          {: RESULT = Lists.newArrayList(e); :}
          | ExpList:lst COMMA Exp:e
          {: lst.add(e); RESULT = lst; :}
          ;
